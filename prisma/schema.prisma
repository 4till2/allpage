datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  profile       Profile?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id       String   @id @default(cuid())
  image    String?
  name     String?
  bio      String?
  colors   String[]
  blocks   Block[]
  username String?  @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
}

model Block {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  title     String?
  url       Url?
  position  Int
}

model Url {
  id              String           @id @default(cuid())
  block           Block            @relation(fields: [blockId], references: [id], onDelete: Cascade)
  blockId         String           @unique
  href            String?
  externalUrlData ExternalUrlData?
}

model ExternalUrlData {
  id         String         @id @default(cuid())
  url        Url            @relation(fields: [urlId], references: [id], onDelete: Cascade)
  urlId      String         @unique
  source     UrlDataSource?
  externalId String?
  data       Json?
}

enum UrlDataSource {
  IFRAMELY
  OEMBED
  DEFAULT
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
